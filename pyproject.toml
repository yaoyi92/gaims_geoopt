[build-system]
requires = [
  "setuptools>=65.0.0",
  "setuptools-scm>=8.0",
  "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "gaims_geoopt"
description = "gaims MLIP assisted geometry optimization."
readme = "README.md"
keywords = ["high-throughput", "automated", "mlpotential"]
license = { text = "GPL-3.0 license" }
authors = [{ name = "Yi Yao", email = "yaoyi92@gmail.com" }]
dynamic = ["version"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
]
requires-python = ">=3.10,<3.12"
dependencies = [
     "pymatgen>=2024.9.17.1",
     "atomate2 @ git+https://github.com/yaoyi92/atomate2.git@mol_for_forcefield",
     "ase==3.23.0",
     "calorine>=3.0",
     "matgl==1.1.3",
     "mace-torch==0.3.9",
     "numpy==1.26.4",
     "lightning-utilities==0.11.9",
     "typing",
     "torchdata==0.7.1",
     "torch==2.2.1",
     "autoplex"
]

[tool.setuptools.packages.find]
where = ["src"]

[project.optional-dependencies]
docs = [
    "autodoc_pydantic==2.2.0",
    "ipython",
    "jsonschema[format]",
    "myst_parser==4.0.0",
    "numpydoc==1.8.0",
    "sphinx-copybutton==0.5.2",
    "sphinx==8.1.3",
    "sphinx_design==0.6.1",
    "myst-nb==1.0.0",
    "sphinx-book-theme==1.1.0",
    "sphinxcontrib-mermaid",
    "nbconvert==7.16.4",
]
workflow-managers = [
    "FireWorks==2.0.4",
    "jobflow-remote==0.1.5"
]
strict = [
     "calorine==3.0",
     "pymatgen==2024.11.13", #?
     "atomate2 @ git+https://github.com/yaoyi92/atomate2.git@mol_for_forcefield",
     "torch==2.2.1",
     "ase==3.23.0",
     "mace-torch==0.3.9",
     "lightning-utilities==0.11.9",
     "numpy==1.26.4",
     "typing",
     "torchdata==0.7.1",
     "autoplex"
]
dev = ["pre-commit>=2.12.1"]
tests = ["pytest", "pytest-mock", "pytest-split", "pytest-cov", "types-setuptools", "nbmake"]

[tool.setuptools_scm]

[tool.cibuildwheel.linux]
archs = ["auto64"]
skip = ["*musllinux*"]
before-all = "ln -s /usr/lib64/libgfortran.so.5 /usr/lib64/libgfortran.so.3"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "E",      # pycodestyle error
    "EXE",    # flake8-executable
    "F",      # pyflakes
    "FA",     # flake8-future-annotations
    "FBT003", # boolean-positional-value-in-call
    "FLY",    # flynt
    "I",      # isort
    "ICN",    # flake8-import-conventions
    "ISC",    # flake8-implicit-str-concat
    "PD",     # pandas-vet
    "PERF",   # perflint
    "PIE",    # flake8-pie
    "PL",     # pylint
    "PT",     # flake8-pytest-style
    "PYI",    # flakes8-pyi
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "RSE",    # flake8-raise
    "RUF",    # Ruff-specific rules
    "SIM",    # flake8-simplify
    "SLOT",   # flake8-slots
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pycodestyle warning
    "YTT",    # flake8-2020
]
ignore = [
    "PD011",   # pandas-use-of-dot-values
    "PERF203", # try-except-in-loop
    "PLR",     # pylint-refactor
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "RUF013",  # implicit-optional
    # TODO remove PT011, pytest.raises() should always check err msg
    "PT011", # pytest-raises-too-broad
    "PT013", # pytest-incorrect-pytest-import
]
pydocstyle.convention = "numpy"
isort.known-first-party = ["gaims_geoopt"]

[tool.pydocstyle]
ignore = "D100,D104,D105,D106,D107,D200,D203,D205,D212,D213,D301,D400,D401,D402,D403,D404,D406,D407,D413,D415"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"*/tests/*" = ["D"]
"tasks.py" = ["D"]

[tool.pytest.ini_options]
addopts = "-x --durations=30 --quiet -rxXs --color=yes -p no:warnings"

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if TYPE_CHECKING:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "@deprecated",
  "show_plot",
]

[tool.coverage.paths]
source = [
    "src/gaims_geoopt/",
]

[tool.coverage.run]
include = ["src/"]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
exclude = ['tutorials']


[tool.codespell]
ignore-words-list = "titel,alls,ans,nd,mater,nwo,te,hart,ontop,ist,ot,fo"
check-filenames = true
